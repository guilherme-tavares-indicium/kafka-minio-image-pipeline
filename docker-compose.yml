version: '3.9'


services:
  zookeeper:
    image: 'bitnami/zookeeper:3'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:2'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

  kafka-producer:
    build:
      context: .
      dockerfile: ./Dockerfile.producer
    container_name: kafka-producer
    depends_on:
      - kafka
      - minio
    environment:
      KAFKA_TOPIC: 'test'
      KAFKA_SERVER: 'kafka:9092'
      MINIO_ENDPOINT: 'minio:9000'
      MINIO_ACCESS_KEY: 'minio_access_key'
      MINIO_SECRET_KEY: 'minio_secret_key'
      MINIO_BUCKET_NAME: 'my-bucket'
    volumes:
      - ./data:/app/data
      - ./producer:/app/producer
    restart: always

  # kafka-producer:
  #   build: ./kafka-producer
  #   environment:
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #     - KAFKA_TOPIC=test
  #     - DATA_PATH=/app/data
  #   volumes:
  #     - ./data:/app/data
  #   restart: on-failure

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  minio:
    image: 'minio/minio:latest'
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: 'minio_access_key'
      MINIO_SECRET_KEY: 'minio_secret_key'
    volumes:
      - 'minio_data:/data'
    ports:
      - '9000:9000'
    command: server /data
    restart: on-failure

volumes:
  minio_data:
